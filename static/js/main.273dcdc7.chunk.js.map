{"version":3,"sources":["reducers/tasksManager/actions.js","reducers/tasksManager/reducer.js","reducers/UI/action.js","reducers/UI/reducer.js","sagas/uploadLocalStore.js","sagas/downloadLocalStore.js","sagas/rootSaga.js","store/index.js","components/timer/timeToStringHelper.js","pages/taskInfo.jsx","pages/errorIdTask.jsx","pages/index.jsx","components/modal.jsx","components/timer/timerRootComponent.jsx","components/tabMainLog.jsx","pages/log.jsx","components/tabMainCharts/CreateChartBarHelper.js","components/tabMainCharts/tabMainCharts.jsx","components/tabMainCharts/CreateRandomTasksHelper.js","routes/index.jsx","pages/charts.jsx","App.jsx","serviceWorker.js","index.js"],"names":["startedTaskCreationAction","task","type","payload","finishedTaskCreationAction","deleteTaskAction","id","putTasksAction","tasks","uploadLocalStoreAction","downloadLocalStoreAction","initialState","localStorage","getItem","JSON","parse","canAddTask","tasksManager","state","action","start","end","spend","isCompleted","hour","map","index","length","name","filter","modalControlerAction","status","inputError","modalIsOpen","tabValue","UI","removeStartTimeWorker","uploadStartTimeWorker","uploadDataWatcher","removeStartTime","removeItem","call","select","setItem","takeEvery","downloadTasksWorker","downloadDataWatcher","stringify","takeLatest","rootSaga","all","reducers","sagasMiddleware","createSagaMiddleware","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","newState","Object","entries","forEach","reducer","localState","undefined","applyMiddleware","next","result","console","log","getState","run","timeToString","counter","hours","Math","floor","minuts","seconds","style","buttonDelete","background","grey","borderRadius","table","maxWidth","margin","tableRow","blue","tableBody","color","div","width","textAlign","padding","buttonHome","boxShadow","connect","dispatch","deleteTask","bindActionCreators","match","neededTask","find","params","Table","className","TableHead","TableRow","TableCell","variant","TableBody","Date","toLocaleTimeString","Button","component","NavLink","onClick","to","size","button","ErrorIdTask","Alert","severity","uploadLocalStore","position","top","left","height","border","h2","red","cyan","bottom","right","modalControler","closeModal","Modal","aria-labelledby","aria-describedby","open","onClose","grid","input","display","tabs","palette","tab","Timer","props","startHandler","startedTaskCreation","dataForTheTask","getTime","getHours","interval","setInterval","setState","timer","stopHandler","finishedTaskCreation","inputValue","inputRef","current","value","clearInterval","focus","React","createRef","this","downloadLocalStore","completed","addEventListener","removeEventListener","children","Grid","container","direction","justify","alignItems","Container","Input","error","inputProps","ref","fullWidth","placeholder","Box","fontWeight","fontSize","Tabs","Tab","label","Component","tbody","trow","buttonInfo","shouldRenderTasks","key","LogPage","chartsArray","hourInDay","charts","extraTime","i","findTask","spendSum","j","minutesLeft","getMinutes","duration","tasksArray","random","min","max","round","newTasksArray","randomStart","randomSpend","randomEnd","randomTasks","putTasks","data","strokeDasharray","dataKey","domain","fill","routeComponents","path","TaskInfoPage","App","basename","exact","from","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.273dcdc7.chunk.js","sourcesContent":["export const STARTED_TASK_CREATION = 'STARTED_TASK_CREATION';\nexport const FINISHED_TASK_CREATION = 'FINISHED_TASK_CREATION';\nexport const DELETE_TASK = 'DELETE_TASK';\nexport const PUT_TASKS = 'PUT_TASKS';\nexport const UPLOAD_LOCAL_STOREGE = 'UPLOAD_LOCAL_STOREGE';\nexport const DOWNLOAD_LOCAL_STOREGE = 'DOWNLOAD_LOCAL_STOREGE';\n\nexport const startedTaskCreationAction = (task) => ({\n  type: STARTED_TASK_CREATION,\n  payload: task,\n});\n\nexport const finishedTaskCreationAction = (task) => ({\n  type: FINISHED_TASK_CREATION,\n  payload: task,\n});\n\nexport const deleteTaskAction = (id) => ({\n  type: DELETE_TASK,\n  payload: id,\n});\n\nexport const putTasksAction = (tasks) => ({\n  type: PUT_TASKS,\n  payload: tasks,\n});\n\nexport const uploadLocalStoreAction = () => ({\n  type: UPLOAD_LOCAL_STOREGE,\n});\n\nexport const downloadLocalStoreAction = () => ({\n  type: DOWNLOAD_LOCAL_STOREGE,\n});\n","import {\n  STARTED_TASK_CREATION,\n  FINISHED_TASK_CREATION,\n  DELETE_TASK,\n  PUT_TASKS,\n} from './actions';\n\nconst initialState = {\n  tasks: localStorage.getItem('tasks') !== null ? JSON.parse(localStorage.getItem('tasks')) : [],\n  canAddTask: false,\n};\n\nconst tasksManager = (state = initialState, action) => {\n  switch (action.type) {\n    case STARTED_TASK_CREATION:\n      return {\n        ...state,\n        tasks: [\n          ...state.tasks, {\n            id: action.payload.start,\n            start: action.payload.start,\n            end: 0,\n            spend: 0,\n            isCompleted: action.payload.isCompleted,\n            hour: action.payload.hour,\n          },\n        ],\n      };\n    case FINISHED_TASK_CREATION:\n      return {\n        ...state,\n        tasks: state.tasks.map((task, index) => {\n          if (index === state.tasks.length - 1) {\n            task.name = action.payload.name;\n            task.end = action.payload.end;\n            task.spend = action.payload.end - task.start;\n            task.isCompleted = action.payload.isCompleted;\n            return task;\n          }\n          return task;\n        }),\n      };\n    case DELETE_TASK:\n      return {\n        ...state,\n        tasks: state.tasks.filter((task) => task.id !== action.payload),\n      };\n    case PUT_TASKS:\n      return {\n        ...state,\n        tasks: action.payload,\n      };\n    default: return state;\n  }\n};\n\nexport default tasksManager;\n","export const MODAL_CONTROLER = 'MODAL_CONTROLER';\n\nexport const modalControlerAction = (status) => ({\n  type: MODAL_CONTROLER,\n  payload: status,\n});\n","import {\n  MODAL_CONTROLER,\n} from './action';\n\nconst initialState = {\n  inputError: false,\n  modalIsOpen: false,\n  tabValue: 0,\n};\n\nconst UI = (state = initialState, action) => {\n  switch (action.type) {\n    case MODAL_CONTROLER:\n      return { ...state, modalIsOpen: action.payload };\n    default: return state;\n  }\n};\n\nexport default UI;\n","import {\n  takeEvery,\n  call,\n  select,\n} from 'redux-saga/effects';\nimport {\n  STARTED_TASK_CREATION,\n  FINISHED_TASK_CREATION,\n} from '../reducers/tasksManager/actions';\n\nconst removeStartTime = () => localStorage.removeItem('startLastTask');\n\nfunction* removeStartTimeWorker() {\n  yield call(removeStartTime);\n}\n\nfunction* uploadStartTimeWorker() {\n  const start = yield select((state) => (\n    state.tasksManager.tasks[state.tasksManager.tasks.length - 1].start\n  ));\n  localStorage.setItem('startLastTask', start);\n}\n\nfunction* uploadDataWatcher() {\n  yield takeEvery(STARTED_TASK_CREATION, uploadStartTimeWorker);\n  yield takeEvery(FINISHED_TASK_CREATION, removeStartTimeWorker);\n}\n\nexport default uploadDataWatcher;\n","import { takeLatest, select } from 'redux-saga/effects';\nimport {\n  DOWNLOAD_LOCAL_STOREGE,\n} from '../reducers/tasksManager/actions';\n\nfunction* downloadTasksWorker() {\n  const tasks = yield select((state) => state.tasksManager.tasks);\n  localStorage.setItem('tasks', JSON.stringify(tasks));\n}\n\nfunction* downloadDataWatcher() {\n  yield takeLatest(DOWNLOAD_LOCAL_STOREGE, downloadTasksWorker);\n}\n\nexport default downloadDataWatcher;\n","import { all } from 'redux-saga/effects';\n\nimport uploadDataWatcher from './uploadLocalStore';\nimport downloadDataWatcher from './downloadLocalStore';\n\nexport default function* rootSaga() {\n  yield all([\n    downloadDataWatcher(),\n    uploadDataWatcher(),\n  ]);\n}\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport tasksManager from '../reducers/tasksManager/reducer';\nimport UI from '../reducers/UI/reducer';\nimport rootSaga from '../sagas/rootSaga';\n\nconst MyLoggerMiddleware = (store) => (next) => (action) => {\n  const result = next(action);\n  console.log(result);\n  console.log('new state: ', store.getState());\n  return result;\n};\n\nconst sagasMiddleware = createSagaMiddleware();\n\n\nconst myCombineReducers = (reducers) => {\n  const myRootReducer = (state, action) => {\n    const newState = {};\n    const redusersEntries = Object.entries(reducers);\n    redusersEntries.forEach((reducer) => {\n      const localState = (state === undefined ? state : state[reducer[0]]);\n      newState[reducer[0]] = reducer[1](localState, action);\n    });\n    return newState;\n  };\n  return myRootReducer;\n};\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  myCombineReducers({\n    tasksManager,\n    UI,\n  }),\n  composeEnhancer(applyMiddleware(MyLoggerMiddleware, sagasMiddleware)),\n);\n\nsagasMiddleware.run(rootSaga);\n\nexport default store;\n","const timeToString = (counter) => {\n  const hours = Math.floor((counter / 1000 / 60 / 60) % 60);\n  const minuts = Math.floor((counter / 1000 / 60) % 60);\n  const seconds = Math.floor((counter / 1000) % 60);\n  return (\n    `${(hours < 10 ? `0${hours}` : hours)} :\n    ${(minuts < 10 ? `0${minuts}` : minuts)} :\n    ${(seconds < 10 ? `0${seconds}` : seconds)}`\n  );\n}\n\nexport default timeToString;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { grey, blue } from '@material-ui/core/colors';\nimport { NavLink } from 'react-router-dom';\nimport {\n  Button,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n} from '@material-ui/core';\n\nimport timeToString from '../components/timer/timeToStringHelper';\nimport { deleteTaskAction } from '../reducers/tasksManager/actions';\n\nconst style = {\n  buttonDelete: { background: grey[50], borderRadius: 0 },\n  table: {\n    maxWidth: 1440,\n    margin: '0 auto',\n  },\n  tableRow: { background: blue[100] },\n  tableBody: { color: blue[900] },\n  div: {\n    width: '100%',\n    textAlign: 'center',\n    padding: '30px 0',\n  },\n  buttonHome: {\n    background: grey[50],\n    boxShadow: '0 0 3px rgba(0, 0, 0, 0.3)',\n  },\n};\n\nconst TaskInfo = ({ deleteTask, tasks, match }) => {\n  const neededTask = tasks.find((task) => task.id === +match.params.id);\n  return (\n    <>\n      <Table\n        className=\"tasks-log\"\n        style={style.table}\n      >\n        <TableHead>\n          <TableRow>\n            <TableCell variant=\"body\">ID</TableCell>\n            <TableCell variant=\"body\">Task</TableCell>\n            <TableCell variant=\"body\">Time start</TableCell>\n            <TableCell variant=\"body\">Time end</TableCell>\n            <TableCell variant=\"body\">Time spend</TableCell>\n            <TableCell variant=\"body\">Delete</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody style={style.tableBody}>\n          <TableRow id={neededTask.id} style={style.tableRow}>\n            <TableCell variant=\"head\"><div>{neededTask.id}</div></TableCell>\n            <TableCell variant=\"head\"><div>{neededTask.name}</div></TableCell>\n            <TableCell variant=\"head\">\n              <div>\n                {new Date(neededTask.start).toLocaleTimeString()}\n              </div>\n            </TableCell>\n            <TableCell variant=\"head\">\n              <div>\n                {new Date(neededTask.end).toLocaleTimeString()}\n              </div>\n            </TableCell>\n            <TableCell variant=\"head\"><div>{timeToString(neededTask.spend)}</div></TableCell>\n            <TableCell variant=\"head\">\n              <Button\n                style={style.buttonDelete}\n                type=\"button\"\n                component={NavLink}\n                onClick={() => {\n                  deleteTask(neededTask.id);\n                }}\n                to=\"/log\"\n                color=\"primary\"\n              >\n                Delete\n              </Button>\n            </TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n      <div\n        style={style.div}\n      >\n        <Button\n          style={style.buttonHome}\n          size=\"large\"\n          type=\"button\"\n          color=\"primary\"\n          component={NavLink}\n          to=\"/log\"\n        >\n          Home\n        </Button>\n      </div>\n    </>\n  );\n};\n\nTaskInfo.propTypes = {\n  deleteTask: PropTypes.func.isRequired,\n  tasks: PropTypes.arrayOf(PropTypes.object).isRequired,\n  match: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nconst mapDispathToProps = (dispatch) => ({\n  deleteTask: bindActionCreators(deleteTaskAction, dispatch),\n});\n\nconst mapStateToProps = (state) => ({\n  tasks: state.tasksManager.tasks,\n});\n\nexport default connect(mapStateToProps, mapDispathToProps)(TaskInfo);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert } from '@material-ui/lab';\nimport { Button } from '@material-ui/core';\nimport { NavLink } from 'react-router-dom';\nimport { grey } from '@material-ui/core/colors';\n\nconst style = {\n  div: {\n    maxWidth: 1440,\n    margin: '0 auto',\n    textAlign: 'center',\n    padding: '30px 0',\n  },\n  button: {\n    background: grey[50],\n    boxShadow: '0 0 3px rgba(0, 0, 0, 0.3)',\n  },\n};\n\nconst ErrorIdTask = ({ match }) => (\n  <>\n    <Alert severity=\"error\" style={{ margin: 30 }}>\n      {`A task with id: ${match.params.id} does not exist.`}\n    </Alert>\n    <div style={style.div}>\n      <Button\n        style={style.button}\n        size=\"large\"\n        type=\"button\"\n        color=\"primary\"\n        component={NavLink}\n        to=\"/\"\n      >\n        Home\n      </Button>\n    </div>\n  </>\n);\n\nErrorIdTask.propTypes = {\n  match: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default ErrorIdTask;\n","import React from 'react';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport InfoPage from './taskInfo';\nimport ErrorIdPage from './errorIdTask';\nimport { uploadLocalStoreAction } from '../reducers/tasksManager/actions';\n\n\nconst TaskInfoPage = ({ tasks, match }) => {\n  const findTask = tasks.find((task) => +match.params.id === task.id);\n  return (findTask !== undefined ? <InfoPage match={match} /> : <ErrorIdPage match={match} />);\n};\n\nconst mapStateToProps = (state) => ({\n  tasks: state.tasksManager.tasks,\n});\n\nconst mapDispathToProps = (dispatch) => ({\n  uploadLocalStore: bindActionCreators(uploadLocalStoreAction, dispatch),\n});\n\nTaskInfoPage.propTypes = {\n  tasks: PropTypes.arrayOf(PropTypes.object).isRequired,\n  match: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispathToProps)(TaskInfoPage);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { Modal, Button } from '@material-ui/core';\nimport { cyan, grey, red } from '@material-ui/core/colors';\n\nimport { modalControlerAction } from '../reducers/UI/action';\n\nconst style = {\n  div: {\n    position: 'absolute',\n    top: '30%',\n    left: '30%',\n    width: 600,\n    height: 100,\n    background: grey[50],\n    border: '2px solid #000',\n    padding: 20,\n  },\n  h2: { color: red[500] },\n  button: {\n    color: cyan[500],\n    position: 'absolute',\n    bottom: 15,\n    right: 15,\n  },\n};\n\nconst MyModal = ({ modalControler, modalIsOpen }) => {\n  const closeModal = () => {\n    modalControler(false);\n  };\n\n  return (\n    <Modal\n      aria-labelledby=\"simple-modal-title\"\n      aria-describedby=\"simple-modal-description\"\n      open={modalIsOpen}\n      onClose={closeModal}\n    >\n      <div style={style.div}>\n        <h2 id=\"simple-modal-title\" style={style.h2}>Empty task name</h2>\n        <p id=\"simple-modal-description\">\n          Your are tring close your task without name, enter the title and try again!\n        </p>\n        <Button\n          style={style.button}\n          onClick={closeModal}\n        >\n          Close\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nMyModal.propTypes = {\n  modalControler: PropTypes.func.isRequired,\n  modalIsOpen: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  modalIsOpen: state.UI.modalIsOpen,\n});\n\nconst mapDispathToProps = (dispatch) => ({\n  modalControler: bindActionCreators(modalControlerAction, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispathToProps)(MyModal);\n","import React from 'react';\nimport './timer.css';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  Grid,\n  Tabs,\n  Tab,\n  Input,\n  Container,\n  Box,\n} from '@material-ui/core';\nimport * as palette from '@material-ui/core/colors';\nimport MyModal from '../modal';\nimport timeToString from './timeToStringHelper';\nimport {\n  startedTaskCreationAction,\n  finishedTaskCreationAction,\n  downloadLocalStoreAction,\n} from '../../reducers/tasksManager/actions';\nimport {\n  modalControlerAction,\n} from '../../reducers/UI/action';\n\nconst style = {\n  grid: {\n    maxWidth: 1440,\n    margin: '0 auto',\n  },\n  input: {\n    width: '300px',\n    margin: '0 auto',\n    display: 'flex',\n  },\n  button: {\n    margin: '0 auto 30px auto',\n    display: 'flex',\n    boxShadow: '0 0 3px rgba(0, 0, 0, 0.3)',\n  },\n  tabs: { width: '100%', background: palette.cyan[700] },\n  tab: { color: palette.grey[50] },\n};\n\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timer: (\n        props.tasks.length > 0\n        && !props.tasks[props.tasks.length - 1].isCompleted\n          ? new Date().getTime() - props.tasks[props.tasks.length - 1].start\n          : 0\n      ),\n    };\n    this.inputRef = React.createRef();\n    this.tabValue = 0;\n    this.inputError = false;\n    this.interval = null;\n  }\n\n  componentDidMount() {\n    const { downloadLocalStore, tasks } = this.props;\n    const { timer } = this.state;\n    const resetTimer = (n) => {\n      if (n !== 0) {\n        this.setState({ timer: 0 });\n      }\n    };\n    const completed = (\n      tasks.length > 0 && tasks[tasks.length - 1].isCompleted !== undefined\n        ? tasks[tasks.length - 1].isCompleted\n        : true\n    );\n    if (!completed) {\n      this.interval = setInterval(() => (\n        this.setState({\n          timer: new Date().getTime() - tasks[tasks.length - 1].start,\n        })\n      ), 1000);\n    } else if (completed && timer !== 0) {\n      clearInterval(this.interval);\n      resetTimer(timer);\n    }\n    window.addEventListener('beforeunload', downloadLocalStore);\n  }\n\n  componentWillUnmount() {\n    const { downloadLocalStore } = this.props;\n    downloadLocalStore();\n    clearInterval(this.interval);\n    window.removeEventListener('beforeunload', downloadLocalStore);\n  }\n\n  startHandler = () => {\n    const { startedTaskCreation } = this.props;\n    const dataForTheTask = {\n      start: new Date().getTime(),\n      hour: new Date().getHours(),\n      isCompleted: false,\n    };\n    this.interval = setInterval(() => (\n      this.setState({ timer: new Date().getTime() - dataForTheTask.start })\n    ), 1000);\n    startedTaskCreation(dataForTheTask);\n  }\n\n  stopHandler = () => {\n    const {\n      finishedTaskCreation,\n      modalControler,\n    } = this.props;\n    const inputValue = this.inputRef.current.value;\n    const dataForTheTask = {\n      end: new Date().getTime(),\n      name: inputValue,\n      isCompleted: true,\n    };\n\n    if (inputValue.length > 0) {\n      clearInterval(this.interval);\n      finishedTaskCreation(dataForTheTask);\n      this.inputRef.current.value = '';\n      this.setState({ timer: 0 });\n      this.inputError = false;\n    } else {\n      modalControler(true);\n      this.inputRef.current.focus();\n      this.inputError = true;\n    }\n  }\n\n  render() {\n    const {\n      tasks,\n      children,\n      tabValue,\n    } = this.props;\n    const isCompleted = (tasks.length > 0 ? tasks[tasks.length - 1].isCompleted : true);\n    const { timer } = this.state;\n\n    return (\n      <div style={{ height: 1000 }}>\n        <MyModal />\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"center\"\n          style={style.grid}\n        >\n          <Container maxWidth={false} className=\"task-init\">\n            <Input\n              id=\"standard-basic\"\n              style={style.input}\n              error={this.inputError}\n              inputProps={{\n                ref: this.inputRef,\n                className: 'input-task-name',\n                style: {\n                  color: (this.inputError ? palette.red[500] : palette.blue[900]),\n                  textAlign: 'center',\n                },\n              }}\n              fullWidth\n              placeholder=\"Name of your task\"\n            />\n            <Box className=\"circle\" color=\"primary.main\" fontWeight={500} fontSize={20}>\n              <p className=\"time\">{timeToString(timer)}</p>\n            </Box>\n            <Button\n              variant=\"text\"\n              color=\"primary\"\n              type=\"submit\"\n              onClick={(isCompleted ? this.startHandler : this.stopHandler)}\n              style={style.button}\n            >\n              {(isCompleted ? 'start' : 'stop')}\n            </Button>\n          </Container>\n          <Tabs style={style.tabs} variant=\"fullWidth\" value={tabValue}>\n            <Tab\n              style={style.tab}\n              label=\"Tasks log\"\n              component={NavLink}\n              to=\"/log\"\n            />\n            <Tab\n              style={style.tab}\n              label=\"Tasks chart\"\n              component={NavLink}\n              to=\"/chart\"\n            />\n          </Tabs>\n          {children}\n        </Grid>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  inputError: state.UI.inputError,\n  modalIsOpen: state.UI.modalIsOpen,\n  tasks: state.tasksManager.tasks,\n});\n\nconst mapDispathToProps = (dispatch) => ({\n  startedTaskCreation: bindActionCreators(startedTaskCreationAction, dispatch),\n  finishedTaskCreation: bindActionCreators(finishedTaskCreationAction, dispatch),\n  modalControler: bindActionCreators(modalControlerAction, dispatch),\n  downloadLocalStore: bindActionCreators(downloadLocalStoreAction, dispatch),\n});\n\nTimer.propTypes = {\n  tasks: PropTypes.arrayOf(PropTypes.object).isRequired,\n  finishedTaskCreation: PropTypes.func.isRequired,\n  modalControler: PropTypes.func.isRequired,\n  startedTaskCreation: PropTypes.func.isRequired,\n  downloadLocalStore: PropTypes.func.isRequired,\n  tabValue: PropTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispathToProps)(Timer);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { grey, blue } from '@material-ui/core/colors';\nimport { NavLink } from 'react-router-dom';\nimport {\n  Button,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n} from '@material-ui/core';\n\nimport { deleteTaskAction } from '../reducers/tasksManager/actions';\nimport timeToString from './timer/timeToStringHelper';\n\nconst style = {\n  div: {\n    maxWidth: 1440,\n    margin: '0 auto',\n  },\n  tbody: { color: blue[900] },\n  trow: { background: blue[100] },\n  buttonInfo: {\n    background: grey[50],\n    borderRadius: 0,\n  },\n  buttonDelete: { background: grey[50], borderRadius: 0 },\n};\n\nconst TabMainLog = ({\n  tasks,\n  deleteTask,\n}) => {\n  const shouldRenderTasks = tasks.filter((task) => task.isCompleted);\n  return (\n    <div\n      className=\"tabs-main\"\n      style={style.div}\n    >\n      <Table className=\"tasks-log\">\n        <TableHead>\n          <TableRow>\n            <TableCell variant=\"body\">№</TableCell>\n            <TableCell variant=\"body\">Task</TableCell>\n            <TableCell variant=\"body\">Time start</TableCell>\n            <TableCell variant=\"body\">Time end</TableCell>\n            <TableCell variant=\"body\">Time spend</TableCell>\n            <TableCell variant=\"body\">Info</TableCell>\n            <TableCell variant=\"body\">Delete</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody style={style.tbody}>\n          {shouldRenderTasks.map((task, index) => (\n            <TableRow id={task.id} key={task.id} style={style.trow}>\n              <TableCell variant=\"head\"><div>{index + 1}</div></TableCell>\n              <TableCell variant=\"head\"><div>{task.name}</div></TableCell>\n              <TableCell variant=\"head\">\n                <div>\n                  {new Date(task.start).toLocaleTimeString()}\n                </div>\n              </TableCell>\n              <TableCell variant=\"head\">\n                <div>\n                  {new Date(task.end).toLocaleTimeString()}\n                </div>\n              </TableCell>\n              <TableCell variant=\"head\"><div>{timeToString(task.spend)}</div></TableCell>\n              <TableCell variant=\"head\">\n                <Button\n                  style={style.buttonInfo}\n                  type=\"button\"\n                  color=\"primary\"\n                  component={NavLink}\n                  to={`/tasks/${task.id}`}\n                >\n                  Info\n                </Button>\n              </TableCell>\n              <TableCell variant=\"head\">\n                <Button\n                  style={style.buttonDelete}\n                  type=\"button\"\n                  onClick={() => {\n                    deleteTask(task.id);\n                  }}\n                  color=\"primary\"\n                >\n                  Delete\n                </Button>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </div>\n  );\n};\n\nTabMainLog.propTypes = {\n  tasks: PropTypes.arrayOf(PropTypes.object).isRequired,\n  deleteTask: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  tasks: state.tasksManager.tasks,\n});\n\nconst mapDispathToProps = (dispatch) => ({\n  deleteTask: bindActionCreators(deleteTaskAction, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispathToProps)(TabMainLog);\n","import React from 'react';\nimport Timer from '../components/timer/timerRootComponent';\nimport TabMainLog from '../components/tabMainLog';\n\nconst LogPage = () => (\n  <Timer tabValue={0}>\n    <TabMainLog />\n  </Timer>\n);\n\nexport default LogPage;\n","\nconst chartsArray = (hourInDay, tasks) => {\n  let charts = [];\n  let extraTime = 0;\n  for (let i = 0; i < hourInDay; i += 1) {\n    const findTask = tasks.filter((task) => task.hour === i);\n    const spend = findTask.map((task) => task.spend);\n    let spendSum = extraTime;\n    for (let j = 0; j < spend.length; j += 1) {\n      spendSum += Math.floor(spend[j] / 1000 / 60);\n    }\n    const minutesLeft = (findTask[0] !== undefined\n      ? 60 - new Date(findTask[0].start).getMinutes() + extraTime\n      : 60\n    );\n    const duration = (spendSum > minutesLeft\n      ? (extraTime = spendSum - minutesLeft, minutesLeft)\n      : (extraTime = 0, spendSum)\n    );\n    charts = [...charts, { hour: i, duration }];\n  }\n  return charts;\n};\n\nexport default chartsArray;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { Button } from '@material-ui/core';\nimport { blue } from '@material-ui/core/colors';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Legend,\n  CartesianGrid,\n  ResponsiveContainer,\n} from 'recharts';\n\nimport { putTasksAction } from '../../reducers/tasksManager/actions';\nimport randomTasks from './CreateRandomTasksHelper';\nimport chartsArray from './CreateChartBarHelper';\n\nconst style = {\n  button: {\n    position: 'fixed',\n    bottom: 50,\n    right: 50,\n  },\n  margin: {\n    top: 50,\n    right: 20,\n    bottom: 50,\n    left: 20,\n  },\n};\n\nconst tasksArray = randomTasks();\n\nconst tabMainCharts = ({\n  putTasks,\n  tasks,\n}) => {\n  const data = chartsArray(24, tasks);\n  return (\n    <>\n      <ResponsiveContainer height={430}>\n        <BarChart\n          data={data}\n          margin={style.margin}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"hour\" domain={[0, 24]} />\n          <YAxis domain={[0, 60]} />\n          <Legend />\n          <Bar name=\"Minuts in this hours\" dataKey=\"duration\" fill={blue[900]} width={30} />\n        </BarChart>\n      </ResponsiveContainer>\n      <Button\n        style={style.button}\n        variant=\"contained\"\n        onClick={() => {\n          putTasks(tasksArray);\n        }}\n      >\n        generate\n      </Button>\n    </>\n  );\n};\n\ntabMainCharts.propTypes = {\n  putTasks: PropTypes.func.isRequired,\n  tasks: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  tasks: state.tasksManager.tasks,\n});\n\nconst mapDispathToProps = (dispatch) => ({\n  putTasks: bindActionCreators(putTasksAction, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispathToProps)(tabMainCharts);\n","const randomTasks = () => {\n  const random = (min, max) => Math.round(Math.random() * (max - min) + min);\n  let newTasksArray = [];\n  let randomStart = new Date().getTime() - 43200000;\n  for (let i = 0; i < random(10, 15); i++) {\n    const randomSpend = random(600000, 5400000);\n    const randomEnd = randomStart + randomSpend;\n    newTasksArray = [...newTasksArray, {\n      id: randomStart,\n      start: randomStart,\n      end: randomEnd,\n      spend: randomSpend,\n      isCompleted: true,\n      hour: new Date(randomStart).getHours(),\n      name: `random task №${i + 1}`,\n    }];\n    randomStart = randomEnd + random(0, 600000);\n  }\n  return newTasksArray;\n};\n\nexport default randomTasks;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport TaskInfoPage from '../pages/index';\nimport LogPage from '../pages/log';\nimport ChartPage from '../pages/charts';\n\nconst routes = [{\n  name: 'log',\n  path: '/log',\n  component: LogPage,\n}, {\n  name: 'info',\n  path: '/tasks/:id',\n  component: TaskInfoPage,\n}, {\n  name: 'chart',\n  path: '/chart',\n  component: ChartPage,\n}];\n\nconst routeComponents = routes.map(({ path, component, name }) => (\n  <Route path={path} component={component} key={name} />\n));\n\nexport default routeComponents;\n","import React from 'react';\nimport Timer from '../components/timer/timerRootComponent';\nimport TabMainCharts from '../components/tabMainCharts/tabMainCharts';\n\nconst ChartPage = () => (\n  <Timer tabValue={1}>\n    <TabMainCharts />\n  </Timer>\n);\n\nexport default ChartPage;\n","import React from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter, Redirect, Switch } from 'react-router-dom';\nimport store from './store/index';\nimport routeComponents from './routes/index';\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <BrowserRouter basename=\"/todoList/\">\n        <Switch>\n          {routeComponents}\n          <Redirect exact from=\"/\" to=\"/log\" />\n        </Switch>\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n  // [::1] is the IPv6 localhost address.\n  || window.location.hostname === '[::1]'\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  || window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n  ),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      const rgstr = registration;\n      rgstr.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n            + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}