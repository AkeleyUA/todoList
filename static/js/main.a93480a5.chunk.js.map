{"version":3,"sources":["reducers/tasksManager/actions.js","reducers/tasksManager/reducer.js","reducers/UI/action.js","reducers/UI/reducer.js","sagas/uploadLocalStore.js","sagas/downloadLocalStore.js","sagas/rootSaga.js","store/index.js","components/modal.jsx","components/timer/timeToStringHelper.js","components/timer/timerRootComponent.jsx","components/tabMainLog.jsx","components/tabMainCharts/CreateRandomTasksHelper.js","components/tabMainCharts/CreateChartBarHelper.js","components/tabMainCharts/tabMainCharts.jsx","pages/taskInfo.jsx","pages/errorIdTask.jsx","routes/index.jsx","pages/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["startedTaskCreationAction","task","type","payload","finishedTaskCreationAction","deleteTaskAction","id","putTasksAction","tasks","uploadLocalStoreAction","downloadLocalStoreAction","verificationInputAction","status","initialState","canAddTask","tasksManager","state","action","start","end","spend","isCompleted","hour","map","index","length","name","filter","changeErrorStatusAction","changeTabActiveAction","value","modalControlerAction","inputError","modalIsOpen","tabValue","UI","removeStartTimeWorker","uploadStartTimeWorker","uploadTasksWorker","uploadDataWatcher","getLocalStorege","localStorage","getItem","JSON","parse","removeStartTime","removeItem","call","select","setItem","stringify","put","takeEvery","downloadTasksWorker","downloadDataWatcher","rootSaga","all","reducers","sagasMiddleware","createSagaMiddleware","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","newState","Object","entries","forEach","reducer","localState","undefined","applyMiddleware","next","result","console","log","getState","run","connect","dispatch","modalControler","bindActionCreators","closeModal","Modal","aria-labelledby","aria-describedby","open","onClose","style","position","top","left","width","height","background","grey","border","padding","color","red","Button","cyan","bottom","right","onClick","timeToString","counter","hours","Math","floor","minuts","seconds","Timer","props","addInterval","startedTaskCreation","dataForTheTask","Date","getTime","getHours","interval","setInterval","setState","timer","removeInterval","verificationInput","changeErrorStatus","finishedTaskCreation","inputRef","current","clearInterval","focus","inputErrorControler","taskNameLength","React","createRef","uploadLocalStore","this","completed","newInterval","downloadLocalStore","children","grid","maxWidth","margin","input","display","inputProps","palette","textAlign","button","boxShadow","tabs","tab","Grid","container","direction","justify","alignItems","Container","className","Input","error","ref","fullWidth","placeholder","onChange","Box","fontWeight","fontSize","variant","Tabs","Tab","label","component","NavLink","to","Component","deleteTask","changeTabActive","shouldRenderTasks","Table","TableHead","TableRow","TableCell","TableBody","blue","key","toLocaleTimeString","borderRadius","randomTasks","random","min","max","round","newTasksArray","randomStart","i","randomSpend","randomEnd","chartsArray","hourInDay","charts","extraTime","findTask","spendSum","j","minutesLeft","getMinutes","duration","putTasks","data","strokeDasharray","dataKey","domain","fill","tasksArray","match","neededTask","find","params","buttonDelete","table","tableRow","tableBody","div","buttonHome","size","ErrorIdTask","Alert","severity","routeComponents","path","TabMainLog","TabMainCharts","exact","useEffect","App","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a93480a5.chunk.js","sourcesContent":["export const STARTED_TASK_CREATION = 'STARTED_TASK_CREATION';\nexport const FINISHED_TASK_CREATION = 'FINISHED_TASK_CREATION';\nexport const DELETE_TASK = 'DELETE_TASK';\nexport const PUT_TASKS = 'PUT_TASKS';\nexport const UPLOAD_LOCAL_STOREGE = 'UPLOAD_LOCAL_STOREGE';\nexport const DOWNLOAD_LOCAL_STOREGE = 'DOWNLOAD_LOCAL_STOREGE';\nexport const VERIFICATION_INPUT = 'VERIFICATION_INPUT';\n\nexport const startedTaskCreationAction = (task) => ({\n  type: STARTED_TASK_CREATION,\n  payload: task,\n});\n\nexport const finishedTaskCreationAction = (task) => ({\n  type: FINISHED_TASK_CREATION,\n  payload: task,\n});\n\nexport const deleteTaskAction = (id) => ({\n  type: DELETE_TASK,\n  payload: id,\n});\n\nexport const putTasksAction = (tasks) => ({\n  type: PUT_TASKS,\n  payload: tasks,\n});\n\nexport const uploadLocalStoreAction = () => ({\n  type: UPLOAD_LOCAL_STOREGE,\n});\n\nexport const downloadLocalStoreAction = () => ({\n  type: DOWNLOAD_LOCAL_STOREGE,\n});\n\nexport const verificationInputAction = (status) => ({\n  type: VERIFICATION_INPUT,\n  payload: status,\n});\n","import {\n  STARTED_TASK_CREATION,\n  FINISHED_TASK_CREATION,\n  DELETE_TASK,\n  PUT_TASKS,\n  VERIFICATION_INPUT,\n} from './actions';\n\nconst initialState = {\n  tasks: [],\n  canAddTask: false,\n};\n\nconst tasksManager = (state = initialState, action) => {\n  switch (action.type) {\n    case STARTED_TASK_CREATION:\n      return {\n        ...state,\n        tasks: [\n          ...state.tasks, {\n            id: action.payload.start,\n            start: action.payload.start,\n            end: 0,\n            spend: 0,\n            isCompleted: action.payload.isCompleted,\n            hour: action.payload.hour,\n          },\n        ],\n      };\n    case FINISHED_TASK_CREATION:\n      return {\n        ...state,\n        tasks: state.tasks.map((task, index) => {\n          if (index === state.tasks.length - 1) {\n            task.name = action.payload.name;\n            task.end = action.payload.end;\n            task.spend = action.payload.end - task.start;\n            task.isCompleted = action.payload.isCompleted;\n            return task;\n          }\n          return task;\n        }),\n      };\n    case DELETE_TASK:\n      return {\n        ...state,\n        tasks: state.tasks.filter((task) => task.id !== action.payload),\n      };\n    case PUT_TASKS:\n      return {\n        ...state,\n        tasks: action.payload,\n      };\n    case VERIFICATION_INPUT:\n      return {\n        ...state,\n        canAddTask: action.payload,\n      };\n    default: return state;\n  }\n};\n\nexport default tasksManager;\n","export const CHANGE_ERROR_STATUS = 'CHANGE_ERROR_STATUS';\nexport const TAB_CHANGE_ACTIVE = 'TAB_CHANGE_ACTIVE';\nexport const MODAL_CONTROLER = 'MODAL_CONTROLER';\n\nexport const changeErrorStatusAction = (status) => ({\n  type: CHANGE_ERROR_STATUS,\n  payload: status,\n});\n\nexport const changeTabActiveAction = (value) => ({\n  type: TAB_CHANGE_ACTIVE,\n  payload: value,\n});\n\nexport const modalControlerAction = (status) => ({\n  type: MODAL_CONTROLER,\n  payload: status,\n});\n","import {\n  CHANGE_ERROR_STATUS,\n  MODAL_CONTROLER,\n  TAB_CHANGE_ACTIVE,\n} from './action';\n\nconst initialState = {\n  inputError: false,\n  modalIsOpen: false,\n  tabValue: 0,\n};\n\nconst UI = (state = initialState, action) => {\n  switch (action.type) {\n    case CHANGE_ERROR_STATUS:\n      return { ...state, inputError: action.payload };\n    case MODAL_CONTROLER:\n      return { ...state, modalIsOpen: action.payload };\n    case TAB_CHANGE_ACTIVE:\n      return { ...state, tabValue: action.payload };\n    default: return state;\n  }\n};\n\nexport default UI;\n","import {\n  takeEvery,\n  call,\n  put,\n  select,\n} from 'redux-saga/effects';\nimport {\n  UPLOAD_LOCAL_STOREGE,\n  STARTED_TASK_CREATION,\n  FINISHED_TASK_CREATION,\n  putTasksAction,\n} from '../reducers/tasksManager/actions';\n\nconst getLocalStorege = () => (localStorage.getItem('tasks') !== null ? JSON.parse(localStorage.getItem('tasks')) : []);\nconst removeStartTime = () => localStorage.removeItem('startLastTask');\n\nfunction* removeStartTimeWorker() {\n  yield call(removeStartTime);\n}\n\nfunction* uploadStartTimeWorker() {\n  const tasks = yield select((state) => state.tasksManager.tasks);\n  const start = yield select((state) => (\n    state.tasksManager.tasks[state.tasksManager.tasks.length - 1].start\n  ));\n  localStorage.setItem('startLastTask', start);\n  localStorage.setItem('tasks', JSON.stringify(tasks));\n}\n\nfunction* uploadTasksWorker() {\n  const tasks = yield call(getLocalStorege);\n  yield put(putTasksAction(tasks));\n}\n\nfunction* uploadDataWatcher() {\n  yield takeEvery(UPLOAD_LOCAL_STOREGE, uploadTasksWorker);\n  yield takeEvery(STARTED_TASK_CREATION, uploadStartTimeWorker);\n  yield takeEvery(FINISHED_TASK_CREATION, removeStartTimeWorker);\n}\n\nexport default uploadDataWatcher;\n","import { takeEvery, select } from 'redux-saga/effects';\nimport {\n  DOWNLOAD_LOCAL_STOREGE, DELETE_TASK, PUT_TASKS,\n} from '../reducers/tasksManager/actions';\n\nfunction* downloadTasksWorker() {\n  const tasks = yield select((state) => state.tasksManager.tasks);\n  localStorage.removeItem('tasks');\n  localStorage.setItem('tasks', JSON.stringify(tasks));\n}\n\nfunction* downloadDataWatcher() {\n  yield takeEvery(DOWNLOAD_LOCAL_STOREGE, downloadTasksWorker);\n  yield takeEvery(DELETE_TASK, downloadTasksWorker);\n  yield takeEvery(PUT_TASKS, downloadTasksWorker);\n}\n\nexport default downloadDataWatcher;\n","import { all } from 'redux-saga/effects';\n\nimport uploadDataWatcher from './uploadLocalStore';\nimport downloadDataWatcher from './downloadLocalStore';\n\nexport default function* rootSaga() {\n  yield all([\n    downloadDataWatcher(),\n    uploadDataWatcher(),\n  ]);\n}\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport tasksManager from '../reducers/tasksManager/reducer';\nimport UI from '../reducers/UI/reducer';\nimport rootSaga from '../sagas/rootSaga';\n\nconst MyLoggerMiddleware = (store) => (next) => (action) => {\n  const result = next(action);\n  console.log(result);\n  console.log('new state: ', store.getState());\n  return result;\n};\n\nconst sagasMiddleware = createSagaMiddleware();\n\n\nconst myCombineReducers = (reducers) => {\n  const myRootReducer = (state, action) => {\n    const newState = {};\n    const redusersEntries = Object.entries(reducers);\n    redusersEntries.forEach((reducer) => {\n      const localState = (state === undefined ? state : state[reducer[0]]);\n      newState[reducer[0]] = reducer[1](localState, action);\n    });\n    return newState;\n  };\n  return myRootReducer;\n};\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  myCombineReducers({\n    tasksManager,\n    UI,\n  }),\n  composeEnhancer(applyMiddleware(MyLoggerMiddleware, sagasMiddleware)),\n);\n\nsagasMiddleware.run(rootSaga);\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { Modal, Button } from '@material-ui/core';\nimport { cyan, grey, red } from '@material-ui/core/colors';\n\nimport { modalControlerAction } from '../reducers/UI/action';\n\nconst MyModal = ({ modalControler, modalIsOpen }) => {\n  const closeModal = () => {\n    modalControler(false);\n  };\n\n  return (\n    <Modal\n      aria-labelledby=\"simple-modal-title\"\n      aria-describedby=\"simple-modal-description\"\n      open={modalIsOpen}\n      onClose={closeModal}\n    >\n      <div style={{\n        position: 'absolute',\n        top: '30%',\n        left: '30%',\n        width: 600,\n        height: 100,\n        background: grey[50],\n        border: '2px solid #000',\n        padding: 20,\n      }}\n      >\n        <h2 id=\"simple-modal-title\" style={{ color: red[500] }}>Empty task name</h2>\n        <p id=\"simple-modal-description\">\n          Your are tring close your task without name, enter the title and try again!\n        </p>\n        <Button\n          style={{\n            color: cyan[500],\n            position: 'absolute',\n            bottom: 15,\n            right: 15,\n          }}\n          onClick={closeModal}\n        >\n          Close\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nMyModal.propTypes = {\n  modalControler: PropTypes.func.isRequired,\n  modalIsOpen: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  modalIsOpen: state.UI.modalIsOpen,\n});\n\nconst mapDispathToProps = (dispatch) => ({\n  modalControler: bindActionCreators(modalControlerAction, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispathToProps)(MyModal);\n","const timeToString = (counter) => {\n  const hours = Math.floor((counter / 1000 / 60 / 60) % 60);\n  const minuts = Math.floor((counter / 1000 / 60) % 60);\n  const seconds = Math.floor((counter / 1000) % 60);\n  return (\n    `${(hours < 10 ? `0${hours}` : hours)} :\n    ${(minuts < 10 ? `0${minuts}` : minuts)} :\n    ${(seconds < 10 ? `0${seconds}` : seconds)}`\n  );\n}\n\nexport default timeToString;\n","import React from 'react';\nimport './timer.css';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport {\n  Button,\n  Grid,\n  Tabs,\n  Tab,\n  Input,\n  Container,\n  Box,\n} from '@material-ui/core';\n\nimport * as palette from '@material-ui/core/colors';\nimport MyModal from '../modal';\nimport timeToString from './timeToStringHelper';\n\nimport {\n  startedTaskCreationAction,\n  finishedTaskCreationAction,\n  uploadLocalStoreAction,\n  downloadLocalStoreAction,\n  verificationInputAction,\n} from '../../reducers/tasksManager/actions';\n\nimport {\n  modalControlerAction,\n  changeErrorStatusAction,\n} from '../../reducers/UI/action';\n\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timer: (props.tasks.length > 0 && !props.tasks[props.tasks.length - 1].isCompleted\n        ? new Date().getTime() - props.tasks[props.tasks.length - 1].start\n        : 0\n      ),\n      interval: null,\n    };\n    this.inputRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const { uploadLocalStore } = this.props;\n    uploadLocalStore();\n  }\n\n  componentDidUpdate() {\n    const { tasks } = this.props;\n    const { interval, timer } = this.state;\n    const completed = (\n      tasks.length > 0 && tasks[tasks.length - 1].isCompleted !== undefined\n        ? tasks[tasks.length - 1].isCompleted\n        : true\n    );\n    if (interval === null && !completed) {\n      const newInterval = setInterval(() => (\n        this.setState({\n          timer: new Date().getTime() - tasks[tasks.length - 1].start,\n        })\n      ), 1000);\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({ interval: newInterval });\n    } else if (interval !== null && completed && timer !== 0) {\n      clearInterval(interval);\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({ timer: 0 });\n    }\n  }\n\n  componentWillUnmount() {\n    const { downloadLocalStore } = this.props;\n    downloadLocalStore();\n  }\n\n  addInterval = () => {\n    const { startedTaskCreation } = this.props;\n    const dataForTheTask = {\n      start: new Date().getTime(),\n      hour: new Date().getHours(),\n      isCompleted: false,\n    };\n    const interval = setInterval(() => (\n      this.setState({ timer: new Date().getTime() - dataForTheTask.start })\n    ), 1000);\n\n    startedTaskCreation(dataForTheTask);\n    this.setState({ interval });\n  }\n\n  removeInterval = () => {\n    const { interval } = this.state;\n    const {\n      canAddTask,\n      verificationInput,\n      changeErrorStatus,\n      finishedTaskCreation,\n      modalControler,\n    } = this.props;\n    const dataForTheTask = {\n      end: new Date().getTime(),\n      name: this.inputRef.current.value,\n      isCompleted: true,\n    };\n\n    if (canAddTask) {\n      clearInterval(interval);\n      finishedTaskCreation(dataForTheTask);\n      changeErrorStatus(false);\n      verificationInput(false);\n      this.inputRef.current.value = '';\n      this.setState({ timer: 0 });\n    } else {\n      modalControler(true);\n      changeErrorStatus(true);\n      verificationInput(false);\n      this.inputRef.current.focus();\n    }\n  }\n\n  inputErrorControler = () => {\n    const {\n      verificationInput,\n      changeErrorStatus,\n      canAddTask,\n      inputError,\n    } = this.props;\n    const taskNameLength = this.inputRef.current.value;\n    if (canAddTask && !taskNameLength) {\n      verificationInput(false);\n    } else if (!canAddTask && taskNameLength) {\n      verificationInput(true);\n    }\n    if (!inputError && !taskNameLength) {\n      changeErrorStatus(true);\n    } else if (inputError && taskNameLength) {\n      changeErrorStatus(false);\n    }\n  }\n\n  render() {\n    const {\n      inputError,\n      tabValue,\n      tasks,\n      children,\n    } = this.props;\n    const isCompleted = (tasks.length > 0 ? tasks[tasks.length - 1].isCompleted : true);\n    const { timer } = this.state;\n    const style = {\n      grid: {\n        maxWidth: 1440,\n        margin: '0 auto',\n      },\n      input: {\n        width: '300px',\n        margin: '0 auto',\n        display: 'flex',\n      },\n      inputProps: {\n        color: (inputError ? palette.red[500] : palette.blue[900]),\n        textAlign: 'center',\n      },\n      button: {\n        margin: '0 auto 30px auto',\n        display: 'flex',\n        boxShadow: '0 0 3px rgba(0, 0, 0, 0.3)',\n      },\n      tabs: { width: '100%', background: palette.cyan[700] },\n      tab: { color: palette.grey[50] },\n\n\n    };\n    return (\n      <div style={{ height: 1000 }}>\n        <MyModal />\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"center\"\n          style={style.grid}\n        >\n          <Container maxWidth={false} className=\"task-init\">\n            <Input\n              id=\"standard-basic\"\n              style={style.input}\n              error={inputError}\n              inputProps={{\n                ref: this.inputRef,\n                className: 'input-task-name',\n                style: style.inputProps,\n              }}\n              fullWidth\n              placeholder=\"Name of your task\"\n              onChange={this.inputErrorControler}\n            />\n            <Box className=\"circle\" color=\"primary.main\" fontWeight=\"500\" fontSize={20}>\n              <p className=\"time\">{timeToString(timer)}</p>\n            </Box>\n            <Button\n              variant=\"text\"\n              color=\"primary\"\n              type=\"submit\"\n              onClick={(isCompleted ? this.addInterval : this.removeInterval)}\n              style={style.button}\n            >\n              {(isCompleted ? 'start' : 'stop')}\n            </Button>\n          </Container>\n          <Tabs style={style.tabs} variant=\"fullWidth\" value={tabValue}>\n            <Tab style={style.tab} label=\"Tasks log\" component={NavLink} to=\"/todoList/\" />\n            <Tab style={style.tab} label=\"Tasks chart\" component={NavLink} to=\"/todoList/tasks-chart\" />\n          </Tabs>\n          {children}\n        </Grid>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  inputError: state.UI.inputError,\n  tabValue: state.UI.tabValue,\n  modalIsOpen: state.UI.modalIsOpen,\n  canAddTask: state.tasksManager.canAddTask,\n  tasks: state.tasksManager.tasks,\n});\n\nconst mapDispathToProps = (dispatch) => ({\n  changeErrorStatus: bindActionCreators(changeErrorStatusAction, dispatch),\n  verificationInput: bindActionCreators(verificationInputAction, dispatch),\n  startedTaskCreation: bindActionCreators(startedTaskCreationAction, dispatch),\n  finishedTaskCreation: bindActionCreators(finishedTaskCreationAction, dispatch),\n  modalControler: bindActionCreators(modalControlerAction, dispatch),\n  uploadLocalStore: bindActionCreators(uploadLocalStoreAction, dispatch),\n  downloadLocalStore: bindActionCreators(downloadLocalStoreAction, dispatch),\n});\n\nTimer.propTypes = {\n  inputError: PropTypes.bool.isRequired,\n  tabValue: PropTypes.number.isRequired,\n  canAddTask: PropTypes.bool.isRequired,\n  tasks: PropTypes.arrayOf(PropTypes.object).isRequired,\n  verificationInput: PropTypes.func.isRequired,\n  changeErrorStatus: PropTypes.func.isRequired,\n  finishedTaskCreation: PropTypes.func.isRequired,\n  modalControler: PropTypes.func.isRequired,\n  startedTaskCreation: PropTypes.func.isRequired,\n  uploadLocalStore: PropTypes.func.isRequired,\n  downloadLocalStore: PropTypes.func.isRequired,\n  children: PropTypes.arrayOf(PropTypes.any).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispathToProps)(Timer);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { grey, blue } from '@material-ui/core/colors';\nimport { NavLink } from 'react-router-dom';\nimport {\n  Button,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n} from '@material-ui/core';\n\nimport { deleteTaskAction } from '../reducers/tasksManager/actions';\nimport { changeTabActiveAction } from '../reducers/UI/action';\n\nimport timeToString from './timer/timeToStringHelper';\n\nconst TabMainLog = ({\n  tasks,\n  deleteTask,\n  changeTabActive,\n  tabValue,\n}) => {\n  const shouldRenderTasks = tasks.filter((task) => task.isCompleted);\n  if (tabValue !== 0) {\n    changeTabActive(0);\n  }\n  return (\n    <div\n      className=\"tabs-main\"\n      style={{\n        maxWidth: 1440,\n        margin: '0 auto',\n      }}\n    >\n      <Table className=\"tasks-log\">\n        <TableHead>\n          <TableRow>\n            <TableCell variant=\"body\">№</TableCell>\n            <TableCell variant=\"body\">Task</TableCell>\n            <TableCell variant=\"body\">Time start</TableCell>\n            <TableCell variant=\"body\">Time end</TableCell>\n            <TableCell variant=\"body\">Time spend</TableCell>\n            <TableCell variant=\"body\">Info</TableCell>\n            <TableCell variant=\"body\">Delete</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody style={{ color: blue[900] }}>\n          {shouldRenderTasks.map((task, index) => (\n            <TableRow id={task.id} key={task.id} style={{ background: blue[100] }}>\n              <TableCell variant=\"head\"><div>{index + 1}</div></TableCell>\n              <TableCell variant=\"head\"><div>{task.name}</div></TableCell>\n              <TableCell variant=\"head\">\n                <div>\n                  {new Date(task.start).toLocaleTimeString()}\n                </div>\n              </TableCell>\n              <TableCell variant=\"head\">\n                <div>\n                  {new Date(task.end).toLocaleTimeString()}\n                </div>\n              </TableCell>\n              <TableCell variant=\"head\"><div>{timeToString(task.spend)}</div></TableCell>\n              <TableCell variant=\"head\">\n                <Button\n                  style={{\n                    background: grey[50],\n                    borderRadius: 0,\n                  }}\n                  type=\"button\"\n                  color=\"primary\"\n                  component={NavLink}\n                  to={`/task/${task.id}`}\n                >\n                  Info\n                </Button>\n              </TableCell>\n              <TableCell variant=\"head\">\n                <Button\n                  style={{ background: grey[50], borderRadius: 0 }}\n                  type=\"button\"\n                  onClick={() => {\n                    deleteTask(task.id);\n                  }}\n                  color=\"primary\"\n                >\n                  Delete\n                </Button>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </div>\n  );\n};\n\nTabMainLog.propTypes = {\n  tasks: PropTypes.arrayOf(PropTypes.object).isRequired,\n  deleteTask: PropTypes.func.isRequired,\n  changeTabActive: PropTypes.func.isRequired,\n  tabValue: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  tasks: state.tasksManager.tasks,\n  tabValue: state.UI.tabValue,\n});\n\nconst mapDispathToProps = (dispatch) => ({\n  deleteTask: bindActionCreators(deleteTaskAction, dispatch),\n  changeTabActive: bindActionCreators(changeTabActiveAction, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispathToProps)(TabMainLog);\n","const randomTasks = () => {\n  const random = (min, max) => Math.round(Math.random() * (max - min) + min);\n  let newTasksArray = [];\n  let randomStart = new Date().getTime() - 43200000;\n  for (let i = 0; i < random(10, 15); i++) {\n    const randomSpend = random(600000, 5400000);\n    const randomEnd = randomStart + randomSpend;\n    newTasksArray = [...newTasksArray, {\n      id: randomStart,\n      start: randomStart,\n      end: randomEnd,\n      spend: randomSpend,\n      isCompleted: true,\n      hour: new Date(randomStart).getHours(),\n      name: `random task №${i + 1}`,\n    }];\n    randomStart = randomEnd + random(0, 600000);\n  }\n  return newTasksArray;\n};\n\nexport default randomTasks;\n","\nconst chartsArray = (hourInDay, tasks) => {\n  let charts = [];\n  let extraTime = 0;\n  for (let i = 0; i < hourInDay; i += 1) {\n    const findTask = tasks.filter((task) => task.hour === i);\n    const spend = findTask.map((task) => task.spend);\n    let spendSum = extraTime;\n    for (let j = 0; j < spend.length; j += 1) {\n      spendSum += Math.floor(spend[j] / 1000 / 60);\n    }\n    const minutesLeft = (findTask[0] !== undefined\n      ? 60 - new Date(findTask[0].start).getMinutes() + extraTime\n      : 60\n    );\n    const duration = (spendSum > minutesLeft\n      ? (extraTime = spendSum - minutesLeft, minutesLeft)\n      : (extraTime = 0, spendSum)\n    );\n    charts = [...charts, { hour: i, duration }];\n  }\n  return charts;\n};\n\nexport default chartsArray;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { Button } from '@material-ui/core';\nimport { blue } from '@material-ui/core/colors';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Legend,\n  CartesianGrid,\n  ResponsiveContainer,\n} from 'recharts';\n\nimport { putTasksAction } from '../../reducers/tasksManager/actions';\nimport { changeTabActiveAction } from '../../reducers/UI/action';\n\nimport randomTasks from './CreateRandomTasksHelper';\nimport chartsArray from './CreateChartBarHelper';\n\nconst tabMainCharts = ({\n  putTasks,\n  tasks,\n  changeTabActive,\n  tabValue,\n}) => {\n  const data = chartsArray(24, tasks);\n  if (tabValue !== 1) {\n    changeTabActive(1);\n  }\n  return (\n    <>\n      <ResponsiveContainer height={430}>\n        <BarChart\n          data={data}\n          margin={{\n            top: 50,\n            right: 20,\n            bottom: 50,\n            left: 20,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"hour\" domain={[0, 24]} />\n          <YAxis domain={[0, 60]} />\n          <Legend />\n          <Bar name=\"Minuts in this hours\" dataKey=\"duration\" fill={blue[900]} width={30} />\n        </BarChart>\n      </ResponsiveContainer>\n      <Button\n        style={{\n          position: 'fixed',\n          bottom: 50,\n          right: 50,\n        }}\n        variant=\"contained\"\n        onClick={() => {\n          const tasksArray = randomTasks();\n          putTasks(tasksArray);\n        }}\n      >\n        generate\n      </Button>\n    </>\n  );\n};\n\ntabMainCharts.propTypes = {\n  putTasks: PropTypes.func.isRequired,\n  tasks: PropTypes.arrayOf(PropTypes.object).isRequired,\n  changeTabActive: PropTypes.func.isRequired,\n  tabValue: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  tasks: state.tasksManager.tasks,\n  tabValue: state.UI.tabValue,\n});\n\nconst mapDispathToProps = (dispatch) => ({\n  putTasks: bindActionCreators(putTasksAction, dispatch),\n  changeTabActive: bindActionCreators(changeTabActiveAction, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispathToProps)(tabMainCharts);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { grey, blue } from '@material-ui/core/colors';\nimport { NavLink } from 'react-router-dom';\nimport {\n  Button,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n} from '@material-ui/core';\n\nimport timeToString from '../components/timer/timeToStringHelper';\nimport { deleteTaskAction } from '../reducers/tasksManager/actions';\n\nconst TaskInfo = ({ deleteTask, tasks, match }) => {\n  const neededTask = tasks.find((task) => task.id === +match.params.id);\n  const style = {\n    buttonDelete: { background: grey[50], borderRadius: 0 },\n    table: {\n      maxWidth: 1440,\n      margin: '0 auto',\n    },\n    tableRow: { background: blue[100] },\n    tableBody: { color: blue[900] },\n    div: {\n      width: '100%',\n      textAlign: 'center',\n      padding: '30px 0',\n    },\n    buttonHome: {\n      background: grey[50],\n      boxShadow: '0 0 3px rgba(0, 0, 0, 0.3)',\n    },\n  };\n\n  return (\n    <>\n      <Table\n        className=\"tasks-log\"\n        style={style.table}\n      >\n        <TableHead>\n          <TableRow>\n            <TableCell variant=\"body\">ID</TableCell>\n            <TableCell variant=\"body\">Task</TableCell>\n            <TableCell variant=\"body\">Time start</TableCell>\n            <TableCell variant=\"body\">Time end</TableCell>\n            <TableCell variant=\"body\">Time spend</TableCell>\n            <TableCell variant=\"body\">Delete</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody style={style.tableBody}>\n          <TableRow id={neededTask.id} style={style.tableRow}>\n            <TableCell variant=\"head\"><div>{neededTask.id}</div></TableCell>\n            <TableCell variant=\"head\"><div>{neededTask.name}</div></TableCell>\n            <TableCell variant=\"head\">\n              <div>\n                {new Date(neededTask.start).toLocaleTimeString()}\n              </div>\n            </TableCell>\n            <TableCell variant=\"head\">\n              <div>\n                {new Date(neededTask.end).toLocaleTimeString()}\n              </div>\n            </TableCell>\n            <TableCell variant=\"head\"><div>{timeToString(neededTask.spend)}</div></TableCell>\n            <TableCell variant=\"head\">\n              <Button\n                style={style.buttonDelete}\n                type=\"button\"\n                component={NavLink}\n                onClick={() => {\n                  deleteTask(neededTask.id);\n                }}\n                to=\"/todoList/\"\n                color=\"primary\"\n              >\n                Delete\n              </Button>\n            </TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n      <div\n        style={style.div}\n      >\n        <Button\n          style={style.buttonHome}\n          size=\"large\"\n          type=\"button\"\n          color=\"primary\"\n          component={NavLink}\n          to=\"/todoList\"\n        >\n          Home\n        </Button>\n      </div>\n    </>\n  );\n};\n\nTaskInfo.propTypes = {\n  deleteTask: PropTypes.func.isRequired,\n  tasks: PropTypes.arrayOf(PropTypes.object).isRequired,\n  match: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nconst mapDispathToProps = (dispatch) => ({\n  deleteTask: bindActionCreators(deleteTaskAction, dispatch),\n});\n\nconst mapStateToProps = (state) => ({\n  tasks: state.tasksManager.tasks,\n});\n\nexport default connect(mapStateToProps, mapDispathToProps)(TaskInfo);\n","import React from 'react';\nimport { Alert } from '@material-ui/lab';\nimport { Button } from '@material-ui/core';\nimport { NavLink } from 'react-router-dom';\nimport { grey } from '@material-ui/core/colors';\n\nconst ErrorIdTask = ({ match }) => {\n  return (\n    <>\n      <Alert severity=\"error\" style={{ margin: 30 }}>\n        A task with id: {match.params.id} does not exist.\n      </Alert>\n      <div style={{\n        maxWidth: 1440,\n        margin: '0 auto',\n        textAlign: 'center',\n        padding: '30px 0',\n      }}\n      >\n        <Button\n          style={{\n            background: grey[50],\n            boxShadow: '0 0 3px rgba(0, 0, 0, 0.3)',\n          }}\n          size=\"large\"\n          type=\"button\"\n          color=\"primary\"\n          component={NavLink}\n          to=\"/todoList/\"\n        >\n          Home\n        </Button>\n      </div>\n    </>\n  );\n};\n\nexport default ErrorIdTask;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport Timer from '../components/timer/timerRootComponent';\nimport TabMainLog from '../components/tabMainLog';\nimport TabMainCharts from '../components/tabMainCharts/tabMainCharts';\nimport TaskInfoPage from '../pages/index';\n\nconst NestedRouteInTimer = () => {\n  const routes = [{\n    path: '/todoList',\n    component: TabMainLog,\n  }, {\n    path: '/todoList/tasks-chart',\n    component: TabMainCharts,\n  }];\n  const routeComponents = routes.map(({ path, component }, key) => (\n    <Route exact path={path} component={component} key={key} />\n  ));\n  return (\n    <Timer>\n      {routeComponents}\n    </Timer>\n  );\n};\n\nconst routes = [{\n  path: '/todoList',\n  component: NestedRouteInTimer,\n}, {\n  path: '/task/:id',\n  component: TaskInfoPage,\n}];\n\nconst routeComponents = routes.map(({ path, component }, key) => (\n  <Route path={path} component={component} key={key} />\n));\n\nexport default routeComponents;\n","import React, { useEffect } from 'react';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport InfoPage from './taskInfo';\nimport ErrorIdPage from './errorIdTask';\nimport { uploadLocalStoreAction } from '../reducers/tasksManager/actions';\n\n\nconst TaskInfoPage = ({ tasks, match, uploadLocalStore }) => {\n  const findTask = tasks.find((task) => +match.params.id === task.id);\n  useEffect(() => {\n    uploadLocalStore();\n  }, [uploadLocalStore]);\n  return (findTask !== undefined ? <InfoPage match={match} /> : <ErrorIdPage match={match} />);\n};\n\nconst mapStateToProps = (state) => ({\n  tasks: state.tasksManager.tasks,\n});\n\nconst mapDispathToProps = (dispatch) => ({\n  uploadLocalStore: bindActionCreators(uploadLocalStoreAction, dispatch),\n});\n\nTaskInfoPage.propTypes = {\n  tasks: PropTypes.arrayOf(PropTypes.object).isRequired,\n  match: PropTypes.objectOf(PropTypes.any).isRequired,\n  uploadLocalStore: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispathToProps)(TaskInfoPage);\n","import React from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n// import { Redirect } from 'react-router-dom';\nimport store from './store/index';\nimport routeComponents from './routes/index';\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        {routeComponents}\n        {/* <Redirect exact from=\"/\" to=\"/todoList\" /> */}\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n  // [::1] is the IPv6 localhost address.\n  || window.location.hostname === '[::1]'\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  || window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n  ),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      const rgstr = registration;\n      rgstr.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n            + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}